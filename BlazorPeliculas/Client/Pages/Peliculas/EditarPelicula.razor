@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositoriocs repositorio
@inject IMostrarMensajes mostrarMensaje
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "admin")]

<h3>Editar Pelicula</h3>

@if (Pelicula == null)
{
    <text>Cargando...</text>
}
else
{
    <FormularioPeliculas Pelicula="Pelicula" OnValidSubmit="Editar"
                         ActoresSeleccionados="ActoresSeleccionados"
                         GenerosNoSeleccionados="GenerosNoSeleccionados"
                         CinesSeleccionados="CinesSeleccionados"
                         CinesNoSeleccionados="CinesNoSeleccionados">
                     </FormularioPeliculas>
}

@code {
    [Parameter] public int PeliculaId { get; set; }
    Pelicula Pelicula;
    private List<Genero> GenerosSeleccionados = new List<Genero>();
    private List<Genero> GenerosNoSeleccionados = new List<Genero>();
    private List<CineDto> CinesSeleccionados = new List<CineDto>();
    private List<CineDto> CinesNoSeleccionados = new List<CineDto>();
    private List<Persona> ActoresSeleccionados { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio
            .Get<PeliculaActualizacionDTO>($"api/peliculas/actualizar/{PeliculaId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                await mostrarMensaje.MostrarMensajesError(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            ActoresSeleccionados = model.Actores;
            GenerosNoSeleccionados = model.GenerosNoSeleccionados;
            GenerosSeleccionados = model.GenerosSeleccionados;
            CinesSeleccionados = model.CinesSeleccionados;
            CinesNoSeleccionados = model.CinesNoSeleccionados;
            Pelicula = model.Pelicula;
        }
    }

    private async Task Editar()
    {
        var httpResponse = await repositorio.Put("api/peliculas", Pelicula);
        if (httpResponse.Error)
        {
            await mostrarMensaje.MostrarMensajesError(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"peliculas/{PeliculaId}");
        }
    }
}